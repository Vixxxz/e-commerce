package Strategy;

import Dao.PedidoDAO;
import Dao.PedidoProdutoDAO;
import Dao.ProdutoDAO;
import Dominio.*;
import Service.GeminiService;
import Util.Resultado;

import java.util.ArrayList;
import java.util.List;

public class RecomendacaoIA implements IStrategy {

    @Override
    public Resultado<String> processar(EntidadeDominio entidade, StringBuilder sb) {
        if (!(entidade instanceof RequisicaoIA requisicao)) {
            return Resultado.erro("Entidade inv√°lida para recomenda√ß√£o com IA.");
        }

        if ((requisicao.getCliente() == null || requisicao.getCliente().getCpf() == null) || requisicao.getPergunta() == null) {
            return Resultado.erro("CPF e pergunta devem ser informados.");
        }

        // --- ORQUESTRA√á√ÉO ---

        // ETAPA 1: Primeira requisi√ß√£o √† IA para gerar o perfil do cliente.
        Resultado<String> resultadoPerfil = gerarPerfilCliente(requisicao.getCliente());
        if (!resultadoPerfil.isSucesso()) {
            // Se a gera√ß√£o do perfil falhar, ainda podemos prosseguir com um aviso.
            sb.append("Aviso: N√£o foi poss√≠vel gerar o perfil do cliente. Erro: ").append(resultadoPerfil.getErro());
        }
        String perfilCliente = resultadoPerfil.getValor() != null ? resultadoPerfil.getValor() : "N√£o foi poss√≠vel carregar o perfil do cliente.";

        // ETAPA 2: Segunda requisi√ß√£o √† IA, agora para obter a recomenda√ß√£o, usando o perfil gerado.
        return obterRecomendacao(
                perfilCliente,
                requisicao.getHistoricoConversa(),
                requisicao.getPergunta()
        );
    }

    /**
     * REQUISI√á√ÉO 1: Gera o perfil do cliente.
     * Busca o hist√≥rico de compras e chama a IA para criar um resumo.
     */
    private Resultado<String> gerarPerfilCliente(Cliente cliente) {
        // 1. Busca de Dados
        String historicoDeCompras = buscarHistorico(cliente);

        // 2. Montagem do Prompt de Perfil
        String promptPerfil = String.format("""
            ### TAREFA
            Analise o seguinte hist√≥rico de compras e crie um perfil conciso em uma √∫nica frase. Foque nas prefer√™ncias de categoria, marca e g√™nero.

            ### HIST√ìRICO DE COMPRAS
            %s

            ### EXEMPLO DE SA√çDA
            "Cliente com prefer√™ncia por t√™nis casuais da marca Puma."
            ou
            "Cliente novo, sem hist√≥rico de compras."

            ### PERFIL DO CLIENTE (gere apenas uma frase)
            """, historicoDeCompras);

        // 3. Chamada √† IA para criar o perfil
        return GeminiService.consultarIA(promptPerfil);
    }

    /**
     * REQUISI√á√ÉO 2: Obt√©m a recomenda√ß√£o.
     * Busca o cat√°logo de produtos e usa o perfil j√° gerado para chamar a IA.
     */
    private Resultado<String> obterRecomendacao(String perfilCliente, String historicoConversa, String pergunta) {
        // 1. Busca do cat√°logo de produtos
        String catalogoProdutos = buscarCatalogo();

        // 2. Montagem do Prompt de Recomenda√ß√£o
        String historicoFinal = historicoConversa == null ? "" : historicoConversa;

        String promptFinal = String.format("""
            ### üß† PERSONA
            Voc√™ √© um **assistente virtual de vendas**, especialista em cal√ßados, com mem√≥ria de contexto e foco total em convers√£o.

            ### üìú REGRAS E DIRETRIZES
                1. **üß© MEM√ìRIA E CONTEXTO (REGRA MAIS IMPORTANTE):**
                   - Mantenha mem√≥ria de tudo o que j√° foi dito ou decidido.
                   - **Jamais repita perguntas** ou reinicie o funil sem necessidade.
                   - Se o cliente for vago (ex: "qualquer modelo", "tanto faz"), use o hist√≥rico e **assuma a necessidade mais prov√°vel**.
                   - ‚ùó Antes de qualquer resposta, valide se sua fala **est√° alinhada com o que j√° foi afirmado ou definido** (ex: se o cliente j√° escolheu um modelo, n√£o volte √† etapa de qualifica√ß√£o).
           \s
                2. **üéØ QUALIFICA√á√ÉO R√ÅPIDA:**
                   - Verifique se o cliente est√° buscando cal√ßados. Se sim, siga o fluxo; se n√£o, redirecione.
           \s
                3. **üö´ PERGUNTAS FORA DO ESCOPO:**
                   - N√£o responda perguntas sobre celebridades, cultura pop, pol√≠tica, esportes ou temas n√£o relacionados a produtos.
                   - **Nunca relacione produtos a figuras p√∫blicas.**
                   - Exemplo de recusa inteligente: s
                     > "Como especialista, n√£o posso especular sobre prefer√™ncias de celebridades, mas posso te recomendar algo com base no seu perfil. Podemos seguir por a√≠?"
           \s
                4. **üîç ATRIBUTOS E HIST√ìRIA DE MODELOS:**
                   - S√≥ valide informa√ß√µes se constarem no cat√°logo.
                   - Se um modelo for citado, procure no cat√°logo. Se estiver:
                     > "Sim, temos o modelo '[Nome]'. Ele √© √≥timo para [benef√≠cio]."
                   - Se n√£o estiver:
                     > "Esse modelo n√£o est√° dispon√≠vel, mas temos √≥timas op√ß√µes com foco em [benef√≠cio similar]. Posso mostrar?"
           \s
                5. **üìö HIST√ìRICO DE MODELOS:**
                   - S√≥ mencione hist√≥ria de modelos presentes no cat√°logo.
                   - Conecte qualquer informa√ß√£o hist√≥rica a um **benef√≠cio real de compra**.
           \s
                6. **üí∏ OR√áAMENTO (REGRAS REFOR√áADAS):**
                   - **Nunca recomende produtos acima do or√ßamento informado**, a menos que o cliente autorize claramente.
                   - Se necess√°rio, pe√ßa permiss√£o:
                     > "Esse modelo custa R$ 520, um pouco acima do seu or√ßamento. Podemos considerar?"
           \s
                7. **üß≠ SONDAGEM INICIAL:**
                   - Em perguntas amplas, fa√ßa **apenas uma pergunta estrat√©gica** (ex: uso casual, trabalho ou esportivo?).
           \s
                8. **üé§ PITCH DE VENDAS PERSONALIZADO:**
                   - Use o cat√°logo e o hist√≥rico.
                   - Evite termos vagos como "melhor", "mais bonito".
                   - Seja espec√≠fico: s
                     > "Este modelo se destaca por...", s
                     > "Com base nas suas compras anteriores..."
           \s
                9. **‚öñÔ∏è COMPARA√á√ÉO ENTRE PRODUTOS:**
                   - Compare apenas itens presentes no cat√°logo.
                   - Destaque diferen√ßas reais. Evite exageros.
           \s
                10. **‚õî PIVOT DE VENDAS PARA ITENS FORA DO ESCOPO (REGRA DE CONVERS√ÉO):**
                     - Se o cliente perguntar sobre um produto ou tipo de uso fora do cat√°logo (ex: trekking, bota, etc.), **N√ÉO diga que 'n√£o √© adequado' ou que 'n√£o temos'.**
                     - Em vez disso, **encontre uma ponte** entre a necessidade expressa pelo cliente e um **benef√≠cio real** de um produto que VOC√ä VENDE.
                     - Reenquadre a necessidade do cliente para que um de seus produtos se torne a solu√ß√£o.
        
                     - **Exemplo de PIVOT DE VENDAS (Cen√°rio: cliente pede t√™nis para o 'Caminho de Santiago'):**
                       > "Essa √© uma jornada incr√≠vel que exige muito dos p√©s! Embora nossos t√™nis n√£o sejam de trekking, a caracter√≠stica mais importante para longas caminhadas √© o **m√°ximo de conforto e amortecimento** para evitar o cansa√ßo. Pensando exatamente nisso, o nosso modelo [Nome de um modelo de corrida do cat√°logo] √© uma refer√™ncia em leveza e sistema de absor√ß√£o de impacto, o que muitos peregrinos modernos t√™m priorizado. Quer conhecer os detalhes dele?"
           \s
                11. **üí¨ COMUNICA√á√ÉO:**
                    - Respostas diretas, claras e com 2 a 4 frases.
                    - **Nunca inicie com apresenta√ß√µes gen√©ricas.**
           \s
                12. **üåÄ CASOS AMB√çGUOS / REPETI√á√ïES:**
                    - Reformule se o cliente repetir uma d√∫vida.
                    - ‚ùó N√£o reinicie o funil se o cliente j√° tiver decidido algo.
           \s
                12.1. **üö® QUEBRA DE LOOP (Nova Regra Antiloop):**
                   - Se voc√™ **j√° perguntou duas vezes** sobre o tipo de uso (casual, esportivo etc.) e o cliente continua com respostas vagas ("qualquer", "tanto faz"):
                     - **PARE IMEDIATAMENTE DE PERGUNTAR.**
                     - **ASSUMA a necessidade mais vers√°til** (geralmente "casual" ou "esportivo").
                     - Informe sua suposi√ß√£o e recomende um modelo direto com base nas **prefer√™ncias j√° mencionadas (ex: cor)**.
           \s
                   **Exemplo de Script de Escape:**
                   > "Entendido. Para facilitar sua escolha, vou assumir que voc√™ busca um modelo esportivo vers√°til na cor preta. Com base nisso, recomendo o [Modelo Y], que oferece conforto, visual discreto e desempenho para diferentes situa√ß√µes. Podemos seguir com ele?"
           \s
                13. **üö´ TERMOS PROIBIDOS:**
                   - Nunca diga: s
                     - "mais vendido do ano" s
                     - "preferido das celebridades" s
                     - "melhor do mercado" s
                     - "usado nas Olimp√≠adas" s
                   - Exceto se estiver **explicitamente** no cat√°logo ou no hist√≥rico.

            ---
            ### üóÇÔ∏è PERFIL DO CLIENTE (Resumo)
            `%s`

            ### üì¶ CAT√ÅLOGO DE PRODUTOS DISPON√çVEIS
            `%s`

            ### üí¨ HIST√ìRICO DA CONVERSA ATUAL
            `%s`
            ---
            ### ‚úÖ TAREFA FINAL
            Analise a **√∫ltima pergunta do cliente**:
            > `%s`
            Responda de forma direta, recomendando **apenas produtos do cat√°logo**.
            """, perfilCliente, catalogoProdutos, historicoFinal, pergunta);

        // 3. Chamada √† IA para obter a recomenda√ß√£o
        return GeminiService.consultarIA(promptFinal);
    }


    // --- M√âTODOS AUXILIARES DE BUSCA DE DADOS (sem altera√ß√£o) ---

    private String buscarHistorico(Cliente cliente) {
        PedidoDAO pedidoDAO = new PedidoDAO();
        Pedido pedido = new Pedido();
        ClienteEndereco clienteEndereco = new ClienteEndereco();
        clienteEndereco.setCliente(cliente);
        pedido.setClienteEndereco(clienteEndereco);
        Resultado<List<EntidadeDominio>> resultadoPedidos = pedidoDAO.consultar(pedido);
        List<EntidadeDominio> pedidos = resultadoPedidos.getValor();

        if (pedidos == null || pedidos.isEmpty()) {
            return "O cliente √© novo e n√£o possui hist√≥rico de compras.";
        }

        PedidoProdutoDAO pedidoProdutoDAO = new PedidoProdutoDAO();
        List<EntidadeDominio> pedidoProdutos = new ArrayList<>();
        for (EntidadeDominio entidadeDominio : pedidos) {
            Pedido ped = (Pedido) entidadeDominio;
            PedidoProduto pedProduto = new PedidoProduto();
            pedProduto.setPedido(ped);
            Resultado<List<EntidadeDominio>> resultadoPedidoProdutos = pedidoProdutoDAO.consultar(pedProduto);
            if (resultadoPedidoProdutos.isSucesso()) {
                pedidoProdutos.addAll(resultadoPedidoProdutos.getValor());
            }
        }

        if (pedidoProdutos.isEmpty()) {
            return "O cliente √© novo e n√£o possui hist√≥rico de compras.";
        }

        StringBuilder historico = new StringBuilder();
        for (EntidadeDominio entidadeDominio : pedidoProdutos) {
            PedidoProduto pedPro = (PedidoProduto) entidadeDominio;
            Produto pro = pedPro.getProduto();
            historico.append("Nome produto: ").append(pro.getNome()).append("\\n");
            historico.append("Categoria: ").append(pro.getCategoria().getNome()).append("\\n");
            historico.append("Marca: ").append(pro.getMarca().getNome()).append("\\n\\n");
        }
        return historico.toString();
    }

    private String buscarCatalogo() {
        ProdutoDAO produtoDAO = new ProdutoDAO();
        Resultado<List<EntidadeDominio>> resultadoProdutos = produtoDAO.consultar(new Produto());
        List<EntidadeDominio> produtos = resultadoProdutos.getValor();

        if (produtos == null || produtos.isEmpty()) {
            return "Nenhum produto encontrado no cat√°logo.";
        }

        StringBuilder produtosBanco = new StringBuilder();
        for (EntidadeDominio entidadeDominio : produtos) {
            Produto pro = (Produto) entidadeDominio;
            produtosBanco.append("Nome produto: ").append(pro.getNome()).append("\\n");
            produtosBanco.append("Modelo: ").append(pro.getModelo()).append("\\n");
            produtosBanco.append("Categoria: ").append(pro.getCategoria().getNome()).append("\\n");
            produtosBanco.append("G√™nero: ").append(pro.getGenero()).append("\\n");
            produtosBanco.append("Marca: ").append(pro.getMarca().getNome()).append("\\n");
            produtosBanco.append("Pre√ßo: ").append(pro.getPreco()).append("\\n");
            produtosBanco.append("Cor: ").append(pro.getCor()).append("\\n\\n");
        }
        return produtosBanco.toString();
    }
}